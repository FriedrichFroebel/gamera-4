
Segmentation
============

``cc_analysis``
---------------

[object] **cc_analysis** ()


:Operates on: ``Image`` [OneBit]
:Returns: [object]
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Performs connected component analysis on the image.

This algorithm assumes 8-connected components, meaning any two
pixels are considered "connected" if they are adjacent in any
direction, including diagonally.

The original image will have all of its pixels "labeled" with a
number representing each connected component.  This is so the
connected components can share data with their source image and
makes things much more efficient.

Returns a list of ccs found in the image.  Since all the CC's
share the same data with the original image, changing the CC's
will affect the original.  If you do not want this behavior, use
the image_copy_ function on each of the CCs::

  ccs = [x.image_copy() for x in ccs]

.. _image_copy: utility.html#image-copy

----------

**Example 1:** cc_analysis()

..  image:: images/OneBit_generic.png
   :height: 99
   :width: 69

|cc_analysis_plugin_00_00| |cc_analysis_plugin_00_01| |cc_analysis_plugin_00_02| |cc_analysis_plugin_00_03| |cc_analysis_plugin_00_04| 

.. |cc_analysis_plugin_00_00| image:: images/cc_analysis_plugin_00_00.png
   :height: 87
   :width: 65

.. |cc_analysis_plugin_00_01| image:: images/cc_analysis_plugin_00_01.png
   :height: 3
   :width: 2

.. |cc_analysis_plugin_00_02| image:: images/cc_analysis_plugin_00_02.png
   :height: 10
   :width: 1

.. |cc_analysis_plugin_00_03| image:: images/cc_analysis_plugin_00_03.png
   :height: 4
   :width: 4

.. |cc_analysis_plugin_00_04| image:: images/cc_analysis_plugin_00_04.png
   :height: 7
   :width: 41



``cc_and_cluster``
------------------

[object] **cc_and_cluster** (float *ratio* = 1.00, int *distance* = 2)


:Operates on: ``Image`` [OneBit]
:Returns: [object]
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Performs connected component analysis using cc_analysis_ and then
clusters the CC's according to their similarity.

TODO: We need some more detailed documentation here.
