
ExternalLibraries
=================

``_from_raw_string``
--------------------

``Image`` [OneBit|GreyScale|Grey16|RGB|Float|Complex] **_from_raw_string** (``Point`` *offset*, ``Dim`` *dim*, int *pixel_type*, int *storage_type*, object *data_string*)


:Returns: ``Image`` [OneBit|GreyScale|Grey16|RGB|Float|Complex]
:Category: ExternalLibraries
:Defined in: string_io.py
:Author: Alex Cobb


Instantiates an image from binary data in a Python string.

Requires a copying operation;  may fail for very large images.

This function is not intended to be used directly.  To move data
to/from Numeric/numarray/PIL, use the functions in numeric_io.py,
numarray_io.py and pil_io.py respectively.


``_to_raw_string``
------------------

object **_to_raw_string** ()


:Operates on: ``Image`` [OneBit|GreyScale|Grey16|RGB|Float|Complex]
:Returns: object
:Category: ExternalLibraries
:Defined in: string_io.py
:Author: Alex Cobb


Returns the image's binary data as a Python string.

Requires a copying operation;  may fail for very large images.

This function is not intended to be used directly.  To move data
to/from Numeric/numarray/PIL, use the functions in numeric_io.py,
numarray_io.py and pil_io.py respectively.



cv
--

``from_cv``
```````````

``Image`` [GreyScale|RGB|Float] **from_cv** (object *image*)


:Returns: ``Image`` [GreyScale|RGB|Float]
:Category: ExternalLibraries/cv
:Defined in: cv_io.py
:Author: Manuel Jeltsch


Instantiates a Gamera RGB image from an OpenCV
cv.cvmat or cv.iplimage. May fail for very large images.

Usage example:

.. code:: Python

  from gamera.plugins import cv_io

  # read a JPEG image and convert it to a Gamera image
  cvImg = cv.LoadImage("foo.jpg")
  img = cv_io.from_cv(cvImg)


``to_cv``
`````````

object **to_cv** ()


:Operates on: ``Image`` [RGB|GreyScale|OneBit]
:Returns: object
:Category: ExternalLibraries/cv
:Defined in: cv_io.py
:Author: Manuel Jeltsch


Returns an OpenCv image (cv.cvmat) containing a copy of
image's data.

Only RGB, Greyscale and Onebit images are supported.
May fail for very large images.


``to_buffer``
-------------

**to_buffer** (object *Buffer*)


:Operates on: ``Image`` [OneBit|GreyScale|Grey16|RGB|Float|Complex]
:Category: ExternalLibraries
:Defined in: gui_support.py
:Author: Michael Droettboom and Karl MacMillan


Encodes the image into a 'buffer' required by wx.Image.
(i.e. 8-bit RGB triplets). If you need to convert a gamera image
*scaled_image* to a wx.Bitmap, you can do so as follows:

.. code:: Python
    
  wximg = wx.EmptyImage(scaled_image.ncols, scaled_image.nrows)
  scaled_image.to_buffer(wximg.GetDataBuffer())
  wxbmp = wx.BitmapFromImage(wximg)


