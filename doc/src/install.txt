==============================
Building and installing Gamera
==============================


Linux (and other \*nix)
=======================

Prerequisites
-------------

- Python 3.5 and later are supported, though Python 3.7 is
  recommended.

  You will need to have the headers (but not the complete source) to
  build Gamera from source code.  Most Linux distributions include
  these as a separate package (eg. ``python-dev`` or ``python-devel``).

- python3-pip

- libgtk-3-dev

- ``gcc`` version 3.1 or later.

- libtiff 3.5.x or later

- libpng 1.2.x or later

- wxPython 4.0.x or later

If any of these prerequisites is installed in a non standard directory,
you can use the environment variables ``CFLAGS`` and ``LDFLAGS`` to
pass its locations to the build script, e.g.::

  CFLAGS=-I/usr/local/include
  LDFLAGS=-L/usr/local/lib
  export CFLAGS LDFLAGS


Standard Build and Install
--------------------------

Gamera is built using the Python-standard Distutils system.  Open a
terminal and type::

  python setup.py build
  sudo python setup.py install

By default, parallelization of the genetic algorithms is only compiled
into Gamera under Linux and with gcc version > 4.2, because we could only
get it running in this environment. If you are sure that you have unbroken
OpenMP support on your system, you can compile Gamera with::

  python setup.py build --openmp=yes

If Gamera is compiled with OpenMP on your system, but OpenMP does not work
on your system for some reason, you can switch it off with::

  python setup.py build --openmp=no


Installing without root privileges
----------------------------------

.. _without_root:

If you do not have root access to your machine, you can make a local
installation of Gamera.

A quick-and-easy way to do this is to use the ``virtual_python.py``
script available here__, and then follow the standard installation
instructions (without using sudo)::

  python setup.py build
  python setup.py install

.. __: http://peak.telecommunity.com/DevCenter/EasyInstall#creating-a-virtual-python

Alternatively, you can set up a local installation by hand.

Make a local python module directory somewhere that you have write
privileges (such as your home directory)::

  mkdir ~/python

From the Gamera build directory, install Gamera into that directory::

  python setup.py install --home=~/python

Set up an environment variables so Python can find stuff there (you
may want to add this to your ~/.bash_profile file)::

  export PYTHONPATH=~/python/lib/python

Add the local Python scripts directory to your path::

  export PATH=~/python/bin:$PATH

Now you should be able to run the ``gamera_gui`` script from the
command line.

Running
-------

Run the ``gamera_gui`` script, which should have installed to
``/usr/local/bin``.  This file can also be copied anywhere (such as
the Desktop) and double-clicked to run Gamera.

.. note:: Running the script from the root of the source tree will not
  work, since it will not be able to find the compiled version of Gamera.

Installing without wxPython
---------------------------

When you need Gamera as a backend for document processing routines on
a server and do not need the GUI, it can save a lot of trouble to
avoid the installation of wxPython. For this case, use the option
``--nowx`` for ``setup.py``::

  python setup.py --nowx build
  sudo python setup.py --nowx install


Mac OS-X
========

Installation on 10.11 (El Captain) and above
--------------------------------------------

Due to the OS-X builtin "system integrity protection" (SIP), wxPython
and Gamera  cannot be installed into the python branch shipped with OS-X.
You must therefore install wxPython and Gamera into a `virtual environment`__.

.. __: https://virtualenv.pypa.io/


Prerequisites
`````````````

As Gamera must be installed from the C++ sources, you must have Xcode
and the Xcode Command Line Tools installed. When Xcode is already installed,
the command line tools can be installed with *xcode-select --install*.

If you want to use the Python that comes with OS-X, you can install
the prerequisites for virtual environments with::

  sudo easy_install pip
  sudo pip3 install virtualenv

If this runs into problems with SIP or if you prefer to use the homebrew
version of Python, you can install the prerequisites instead with::

  brew install python3
  pip3 install virtualenv

Then you can set up a virtual environment and install wxPython therein::

  virtualenv /usr/local/lib/py2gamera
  source /usr/local/lib/py2gamera/bin/activate
  pip3 install -U wxPython


Build and install
`````````````````

You can install Gamera into the same virtual environment with::

  source /usr/local/lib/py2gamera/bin/activate
  cd root_to_gamera_sources
  python setup.py build
  python setup.py install


Running
```````

On OS-X, wxPython applications do not run in virtualenvs, because
wxPython requires a "Framework build of python". Fortunately, there is
a simple workaround: store the following shell script as *gamera_gui*
in *$HOME/bin* and modify the PATH variable in $HOME/.profile such, that
*$HOME/bin* is quite at the beginning of the list. Then you can run
*gamera_gui* from the shell, and the script handles the setup of the
virtualenv automatically. (Thanks to `George V. Reilly`__ for proposing
this fix).

.. __: http://www.georgevreilly.com/blog/2015/09/20/RunSnakeRun-WxPython-Brew-Virtualenv.html

Wrapper shell-script for *gamera_gui* using the Python shipped with OS-X:

.. code:: sh

  #
  # wrapper script for running gamera_gui
  # from virtualenv with osx stock python
  #

  source $HOME/python/py2gamera/bin/activate

  WXPYTHON_APP="gamera_gui"
  PYVER="$(python --version 2>&1 | cut -d ' ' -f 2 | cut -d '.' -f 1,2)"

  if [ -z "$VIRTUAL_ENV" ] ; then
      echo "You must activate your virtualenv: set '$VIRTUAL_ENV'"
      exit 1
  fi

  SYSTEM_FRAMEWORK_PYTHON_ROOT="/System$SYSTEM_FRAMEWORK_PYTHON_ROOT"

  PYTHON_BINARY="bin/python$PYVER"
  FRAMEWORK_PYTHON="/usr/bin/python$PYVER"

  # Use the Framework Python to run the app
  export PYTHONHOME=$VIRTUAL_ENV
  exec "$FRAMEWORK_PYTHON" "$VIRTUAL_ENV/bin/$WXPYTHON_APP" $*


Wrapper shell-script for *gamera_gui* using the homebrew Python:

.. code:: sh

  #
  # wrapper script for running gamera_gui
  # from virtualenv with homebrew python
  #

  source /usr/local/lib/py2gamera/bin/activate

  WXPYTHON_APP="gamera_gui"
  PYVER="$(python --version 2>&1 | cut -d ' ' -f 2 | cut -d '.' -f 1,2)"

  if [ -z "$VIRTUAL_ENV" ] ; then
      echo "You must activate your virtualenv: set '$VIRTUAL_ENV'"
      exit 1
  fi

  SYSTEM_FRAMEWORK_PYTHON_ROOT="/System$SYSTEM_FRAMEWORK_PYTHON_ROOT"

  PYSUBVER="$(python --version 2>&1 | cut -d ' ' -f2)"  # e.g., 2.7.10
  BREW_PYTHON_ROOT="`ls -d $(brew --prefix)/Cellar/python@2/$PYSUBVER*`"
  BREW_PYTHON_ROOT="$BREW_PYTHON_ROOT/Frameworks/Python.framework/Versions/$PYVER"

  PYTHON_BINARY="bin/python$PYVER"
  FRAMEWORK_PYTHON="$BREW_PYTHON_ROOT/$PYTHON_BINARY"

  VENV_SITE_PACKAGES="$VIRTUAL_ENV/lib/python$PYVER/site-packages"

  # Ensure wx.pth is set up in the virtualenv
  # (does not seem to be necessary, so we comment it out)
  #test -e "$VENV_SITE_PACKAGES/wx.pth" || \
  #  cp "/Library/Python/$PYVER/site-packages/wxredirect.pth" "$VENV_SITE_PACKAGES/wx.pth"

  # Use the Framework Python to run the app
  export PYTHONHOME=$VIRTUAL_ENV
  exec "$FRAMEWORK_PYTHON" "$VIRTUAL_ENV/bin/$WXPYTHON_APP" $*
